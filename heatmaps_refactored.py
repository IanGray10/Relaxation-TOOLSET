# -*- coding: utf-8 -*-
"""Heatmaps_refactored.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T4ElKNgUR_iciWE29plDWFl1cp_Dtm-C
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from pandas._libs.tslibs import conversion
from mpl_toolkits.axes_grid1 import make_axes_locatable

from google.colab import drive
drive.mount('/content/drive')

class PlotHeatMaps():

    def readFile(self, filePath):
        compatibilityFile = os.path.join(filePath, "compatibility.csv")
        strengthFile = os.path.join(filePath, "strength.csv")
        supportFile = os.path.join(filePath, "support.csv")
        noiseFilePath = os.path.join(filePath, "noise.csv")
        dfCompatibility = pd.read_csv(compatibilityFile, header=0, index_col=0)
        dfStrength = pd.read_csv(strengthFile, header=0, index_col=0)
        dfSupport = pd.read_csv(supportFile, header=0, index_col=0)
        self.dfNoise = pd.read_csv(noiseFilePath, header=None)
        self.dataDict = {"comp": dfCompatibility, "str": dfStrength, "sup": dfSupport}

    def noiseLabelCheck(self):
        self.doNoiseLabel = True
        if self.dfNoise.iat[0,0] == "on":
            self.doNoiseLabel = True
        elif self.dfNoise.iat[0,0] == "off":
            self.doNoiseLabel = False
        else:
            print("FATAL ERROR: noise.csv does not equal 'on' or 'off'.")
            exit(1)

    def getNumObjectsNumLabels(self, dataFile):

        objectIndices = []
        labelIndices = []
        plotData = self.dataDict.get(dataFile)
        for ij, columnName in enumerate(plotData.columns):
            self.columnNameSplit = columnName.split()
            objectIndex = int(self.columnNameSplit[0])
            labelIndex = int(self.columnNameSplit[1])
            objectIndices.append(objectIndex)
            labelIndices.append(labelIndex)

        self.numObjects = max(objectIndices)
        self.numLabelsIncludingNoise = max(labelIndices)
        self.numLabels = self.numLabelsIncludingNoise
        if self.doNoiseLabel:
            self.numLabels = self.numLabelsIncludingNoise - 1

    def convertFromObjectIntegerToString(self, integer):
        string = str(integer)

        if integer <= 0:
            print("ERROR: OBJECT INDEX MUST BE A POSITIVE INTEGER")
            exit(1)
        elif integer < 10:
            string = "0" + string + " "
        elif integer < 100:
            string = string + " "
        else:
            print("ERROR: OBJECT INDEX CANNOT BE >= 100")
            exit(1)
        return string

    def mapVisuals(self, mapColor, shade, lineWidth):
        self.color = mapColor
        self.shader = shade
        self.lWidth = lineWidth


    def wholeFileHeatMap(self, dataFile, savePlot=False, saveName="test.jpg"):
        plottingData = self.dataDict.get(dataFile).copy()

        fig, ax = plt.subplots(figsize=(10, 5))
        c = ax.pcolormesh(plottingData, cmap=self.color, shading=self.shader, edgecolor= 'k', linewidth=self.lWidth)
        bar = fig.colorbar(c)


        if dataFile == 'comp':
            tempTicks = range(1, len(plottingData) + 1)
            middleTicks = []
            for i in tempTicks:
                    middleTicks.append(i - 0.5)
            xTickLabels = plottingData.head()
            yTickLabels = plottingData.index
            plt.xticks(middleTicks, xTickLabels)
            plt.yticks(middleTicks, yTickLabels)
            ax.title.set_text("Entire File HeatMap")
        else:
            tempTicks = range(1, len(plottingData.index) + 1)
            tempTicksX = range(1, len(plottingData.columns) + 1)
            middleTicksY = []
            middleTicksX = []
            for i in tempTicks:
                middleTicksY.append(i - 0.5)
            for i in tempTicksX:
                middleTicksX.append(i - 0.5)
            xTickLabels = plottingData.head()
            yTickLabels = plottingData.index
            plt.xticks(middleTicksX, xTickLabels)
            plt.yticks(middleTicksY, yTickLabels)
            ax.title.set_text("Entire File HeatMap")
        if savePlot == True:
            plt.savefig(saveName, bbox_extra_artists=(bar,))



    def excludeObjectsHeatMap(self, dataFile, excludedObjects, savePlot=False, saveName="test.jpg"):

        # original data choosen from functions
        plottingData = self.dataDict.get(dataFile).copy()
        # plot data that has the excluded Objects removed
        leftOverPlotData = []
        # converted object input into string
        objectString = []


        for obj in excludedObjects:
            objectString.append(self.convertFromObjectIntegerToString(obj))


        excludedObj = {col for obj in objectString for col in plottingData if col.startswith(obj)}

        leftOverObjects = [col for col in plottingData if col not in excludedObj]

        for obj in excludedObj:
            if dataFile == 'comp':
                plottingData.drop(obj, axis=0, inplace=True)
                plottingData.drop(obj, axis=1, inplace=True)
            else:
                plottingData.drop(obj, axis=1, inplace=True)


        fig, ax = plt.subplots()
        c = ax.pcolormesh(plottingData, cmap=self.color, shading=self.shader, edgecolor= 'k', linewidth=self.lWidth)
        ax.title.set_text("Excluded Objects Heatmap")
        bar = fig.colorbar(c)
        if savePlot == True:
            plt.savefig(saveName, bbox_extra_artists=(bar,))

        if dataFile == 'comp':
            tempTicks = range(1, len(leftOverObjects) + 1)
            middleTicks = []
            for i in tempTicks:
                    middleTicks.append(i - 0.5)
            xTickLabels = plottingData.head()
            yTickLabels = plottingData.index
            plt.xticks(middleTicks, xTickLabels)
            plt.yticks(middleTicks, yTickLabels)
        else:
            tempTicks = range(1, len(plottingData.index) + 1)
            tempTicksX = range(1, len(plottingData.columns) + 1)
            middleTicks = []
            middleTicksX = []
            for i in tempTicks:
                middleTicks.append(i - 0.5)
            for i in tempTicksX:
                middleTicksX.append(i - 0.5)


            xTickLabels = plottingData.head()
            yTickLabels = plottingData.index
            plt.xticks(middleTicksX, xTickLabels)
            plt.yticks(middleTicks, yTickLabels)


    def includeObjectsHeatMap(self, dataFile, includedObjects, savePlot=False, saveName="test.jpg"):

        plottingData = self.dataDict.get(dataFile).copy()


        objectString = []

        for obj in includedObjects:
            objectString.append(self.convertFromObjectIntegerToString(obj))


        includedObj = {col for obj in objectString for col in plottingData if col.startswith(obj)}
        leftOverObjects = [col for col in plottingData if col not in includedObj]


        for obj in leftOverObjects:
            if dataFile == 'comp':
                plottingData.drop(obj, axis=0, inplace=True)
                plottingData.drop(obj, axis=1, inplace=True)
            else:
                plottingData.drop(obj, axis=1, inplace=True)


        fig, ax = plt.subplots()
        c = ax.pcolormesh(plottingData, cmap=self.color, shading=self.shader, edgecolor= 'k', linewidth=self.lWidth)
        ax.title.set_text("Included Objects Heatmap")
        bar = fig.colorbar(c)
        if savePlot == True:
            plt.savefig(saveName, bbox_extra_artists=(bar,))

        if dataFile == 'comp':
            tempTicks = range(1, len(includedObj) + 1)
            middleTicks = []
            for i in tempTicks:
                    middleTicks.append(i - 0.5)
            tickLabelsX = plottingData.head()
            tickLabelsY = plottingData.index
            plt.xticks(middleTicks, tickLabelsX)
            plt.yticks(middleTicks, tickLabelsY)
        else:
            tempTicks = range(1, len(plottingData.index) + 1)
            tempTicksX = range(1, len(plottingData.columns) + 1)
            middleTicks = []
            middleTicksX = []
            for i in tempTicks:
                middleTicks.append(i - 0.5)
            for i in tempTicksX:
                middleTicksX.append(i - 0.5)
            tickLabelsX = plottingData.head()
            tickLabelsY = plottingData.index
            plt.xticks(middleTicksX, tickLabelsX)
            plt.yticks(middleTicks, tickLabelsY)






    def main(self):
        self.readFile()
        self.mapVisuals()

plotHeatMaps = PlotHeatMaps()
plotDataIan = "/content/drive/MyDrive/Main/WorkFiles/PlottingWork/WorkData/RelaxationLabeling"
plotDataMichael = "/content/drive/MyDrive/Glover Labs/Clients/Focused Cryo/Relax data"
plotHeatMaps.readFile(plotDataIan)
# do we want a global figsize argument?
plotHeatMaps.mapVisuals('summer', 'nearest', 0.2)

plotHeatMaps.noiseLabelCheck()
print(plotHeatMaps.dfNoise)
print(plotHeatMaps.doNoiseLabel)

plotHeatMaps.getNumObjectsNumLabels("str")
print("numObjects: {}".format(plotHeatMaps.numObjects))
print("numLabelsIncludingNoise: {}".format(plotHeatMaps.numLabelsIncludingNoise))
print("numLabels: {}".format(plotHeatMaps.numLabels))

plotHeatMaps.excludeObjectsHeatMap('str', [2, 3], savePlot=False, saveName="test.jpg")
#plt.savefig("filename.jpg")

plotHeatMaps.includeObjectsHeatMap('str', [1, 2], savePlot=False, saveName="test.jpg")

#plt.savefig("filename.jpg")

plotHeatMaps.wholeFileHeatMap('comp', savePlot=False, saveName="test.jpg")