# -*- coding: utf-8 -*-
"""plotting_refactored.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A-5qi1P38e_KmXnVCrD-ltPr_KBVkUjR

# Import External libraries
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import random
import os

"""# Defining PlotStrengthSupport class

"""

class PlotStrengthSupport():

    def readCsv(self, directoryPath):
        strengthFilePath = os.path.join(directoryPath, "strength.csv")
        supportFilePath = os.path.join(directoryPath, "support.csv")
        noiseFilePath = os.path.join(directoryPath, "noise.csv")
        assignmentsFilePath = os.path.join(directoryPath, "Assignments.csv")
        self.dfStrength = pd.read_csv(strengthFilePath, header=0, index_col=0)
        self.dfSupport = pd.read_csv(supportFilePath, header=0, index_col=0)
        self.dfNoise = pd.read_csv(noiseFilePath, header=None)
        self.dfAssignments = pd.read_csv(assignmentsFilePath, header=None)
        self.dfDict = {"strength": self.dfStrength, "support": self.dfSupport}

    def noiseLabelCheck(self):
        self.doNoiseLabel = True
        if self.dfNoise.iat[0,0] == "on":
            self.doNoiseLabel = True
        elif self.dfNoise.iat[0,0] == "off":
            self.doNoiseLabel = False
        else:
            print("FATAL ERROR: noise.csv does not equal 'on' or 'off'.")
            exit(1)

    def getNumObjectsNumLabels(self, dataFile):
        objectIndices = []
        labelIndices = []
        plotData = self.dfDict.get(dataFile)
        for ij, columnName in enumerate(plotData.columns):
            self.columnNameSplit = columnName.split()
            objectIndex = int(self.columnNameSplit[0])
            labelIndex = int(self.columnNameSplit[1])
            objectIndices.append(objectIndex)
            labelIndices.append(labelIndex)

        self.numObjects = max(objectIndices)
        self.numLabelsIncludingNoise = max(labelIndices)
        self.numLabels = self.numLabelsIncludingNoise
        if self.doNoiseLabel:
            self.numLabels = self.numLabelsIncludingNoise - 1


    def convertFromLabelIntegerToString(self, integer):
        string = str(integer)
        if integer <= 0:
            print("ERROR: LABEL INDEX MUST BE A POSITIVE INTEGER")
            exit(1)
        elif integer < 10:
            string = " 0" + string
        elif integer < 100:
            string = " " + string
        else:
            print("ERROR: LABEL INDEX CANNOT BE >= 100")
            exit(1)
        return string

    def convertFromObjectIntegerToString(self, integer):
        string = str(integer)
        if integer <= 0:
            print("ERROR: OBJECT INDEX MUST BE A POSITIVE INTEGER")
            exit(1)
        elif integer < 10:
            string = "0" + string + " "
        elif integer < 100:
            string = string + " "
        else:
            print("ERROR: OBJECT INDEX CANNOT BE >= 100")
            exit(1)
        return string

    def plotOneObjectLabelPair(self, columnName, dataFile, grid=False):
        plotData = self.dfDict.get(dataFile)
        self.X = plotData.index
        y = plotData[columnName]
        plt.plot(self.X, y, marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
        plt.grid(grid)
        plt.xlabel("Iteration")
        plt.title(columnName + " Iteration Over Time")
        plt.show()
            # put one space after string for selectedObject

    def plotObjectAndItsLabels(self, selectedObject, dataFile, onePlot=False):
        merge = onePlot
        plotData = self.dfDict.get(dataFile)
        if merge == True:
            object_cols = [col for col in plotData.columns if selectedObject in col]
            object_cols.sort()
            print(object_cols)
            for cols in object_cols:
                y = plotData[cols]
                plt.plot(self.X, y, label=str(cols), marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
                plt.legend(loc='upper center', bbox_to_anchor=(1.5, 1.05), ncol=3, fancybox=True, shadow=True)
                plt.grid()
                plt.ylabel(dataFile)
                plt.xlabel("Iteration")
                plt.title("Object " + str(selectedObject))
        else:
            object_cols = [col for col in plotData.columns if selectedObject in col]
            object_cols.sort()
            for cols in object_cols:
                y = plotData[cols]
                plt.figure()
                plt.plot(self.X, y, marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
                plt.grid()
                plt.ylabel(dataFile)
                plt.xlabel("Iteration")
                plt.title(cols)
            # put one space before string for selectedLabel

    def plotLabelAndItsObjects(self, selectedLabel, dataFile, onePlot=False):
        merge = onePlot
        plotData = self.dfDict.get(dataFile)
        if merge == True:
            label_cols = [col for col in plotData.columns if selectedLabel in col]
            label_cols.sort()
            print(label_cols)
            for cols in label_cols:
                y = plotData[cols]
                plt.plot(self.X, y, label=str(cols), marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
                plt.legend(loc='upper center', bbox_to_anchor=(1.5, 1.05), ncol=3, fancybox=True, shadow=True)
                plt.ylabel(dataFile)
                plt.xlabel("Iteration")
                plt.title("Label " + str(selectedLabel))
        else:
            label_cols = [col for col in plotData.columns if selectedLabel in col]
            label_cols.sort()
            print(label_cols)
            for cols in label_cols:
                y = plotData[cols]
                plt.figure()
                plt.plot(self.X, y, marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
                plt.ylabel(dataFile)
                plt.xlabel("Iteration")
                plt.title(cols)

    def plotAllObjectAllLabel(self, dataFile):
        plotData = self.dfDict.get(dataFile)
        cols = [cols for cols in plotData]
        cols.sort()
        for col in cols:
            y = plotData[col]
            plt.figure()
            plt.plot(self.X, y, marker=random.choice(mark), linestyle=random.choice(line_style), color=random.choice(line_colors))
            plt.xlabel("Iteration")
            plt.title(col)
        # put objects and labels into a list [0, 0] when passing the arguement

    def plotArbitraryListsOfObjectsLabels(self, dataFile, objects, labels):
        for iObject in objects:
            objectString = self.convertFromObjectIntegerToString(iObject)
            for jLabel in labels:
                labelString = self.convertFromLabelIntegerToString(jLabel)
                columnName = objectString[:-1] + labelString
                print('columnName: ', columnName)
                self.plotOneObjectLabelPair(columnName, dataFile)

    def main(self):
        self.readCsv("/content/drive/MyDrive/WorkdataFiles/WorkData/RelaxationLabeling")
        self.noiseLabelCheck()
        self.getNumObjectsNumLabels()

    def __init__(self, directoryPath):
        self.readCsv(directoryPath)
        self.noiseLabelCheck()
        self.getNumObjectsNumLabels("strength")

"""# Reading in Csv dataFiles and viewing data set

"""

directoryPathIan = "/content/drive/MyDrive/Main/WorkFiles/PlottingWork/WorkData/RelaxationLabeling"
directoryPathPapa = "/content/drive/MyDrive/Glover Labs/Clients/Focused Cryo/Relax data/log_IMAGES14 No Noise Label"
directoryPathManny = "/content/drive/MyDrive/Alternative organization/Work/Glover Labs: a Technology Think Tank/Clients/R. Michael Glover/Failed noise label case"
plotStrengthSupport = PlotStrengthSupport(directoryPathManny)

"""# Displaying the assignments"""

plotStrengthSupport.dfAssignments

"""# Seeing if there is a noise label"""

plotStrengthSupport.noiseLabelCheck()
print(plotStrengthSupport.dfNoise)
print(plotStrengthSupport.doNoiseLabel)

"""# Parsing column titles to get numObjects and numLabels"""

plotStrengthSupport.getNumObjectsNumLabels("strength")
print("numObjects: {}".format(plotStrengthSupport.numObjects))
print("numLabelsIncludingNoise: {}".format(plotStrengthSupport.numLabelsIncludingNoise))
print("numLabels: {}".format(plotStrengthSupport.numLabels))

"""# Variables used to change the way our graphs look"""

# Variables holding our styling values
mark = ["s", "o", "v", "^", "<", ">", "1", "2", "8", "p", "*", "x"]
line_style = ['dashed', 'dotted', 'solid', 'dashdot']

line_colors = ["gray", "blue", "black", "orange"]

"""## Plotting an arbitrary list of objects and labels"""

plotStrengthSupport.plotArbitraryListsOfObjectsLabels("strength", objects=[32], labels=[1, 2, 3, 4, 5, 6, 7, 8, 9,10])
#plt.savefig("filename.jpg")

"""# Function to plot 1 object and 1 label over time

"""

plotStrengthSupport.plotOneObjectLabelPair("01 02", "strength", True)
#plt.savefig("filename.jpg")

"""# Plotting for 1 object and all of its corresponding labels"""

plotStrengthSupport.plotObjectAndItsLabels("08 ", "strength", True)
directoryPathMannyPlots = "/content/drive/MyDrive/Alternative organization/Work/Glover Labs: a Technology Think Tank/Clients/R. Michael Glover/Failed noise label case/object08_vs_labelsAll.jpg"
plt.savefig(directoryPathMannyPlots)

"""# Plotting for 1 label and all of its corrsponding objects"""

plotStrengthSupport.plotLabelAndItsObjects(" 06", "strength", True)
#plt.savefig("filename.jpg")



plotStrengthSupport.plotAllObjectAllLabel("strength")
#plt.savefig("filename.jpg")





